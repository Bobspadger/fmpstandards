/*
 * =====================================================
 * WindowActiveTabs ( init ; theList )
 * 
 * PARAMETERS:
 *		@init (num) starting point according to layout stacking order
 *		@theList (list) the list of tabs pushed into each iteration of the recursion
 * RETURNS:
 *		(list) List of all active frontmost tabs
 * DEPENDENCIES:
 *		none
 * NOTES:
 *		Original by Koen Van Hulle (SHpartners.com)
 * =====================================================
 * 
 */

Let ( [ 
	init = init +1; // increment counter
	~objects = LayoutObjectNames ( Get( FileName ); Get ( LayoutName ) ); 
	~tabToCheck = GetValue ( ~objects ; init ); 
	~parentTab = GetLayoutObjectAttribute ( ~tabToCheck; "enclosingObject" ); 
	~isCurrentTab = Case(
						IsEmpty ( ~tabToCheck ); // there's no tab name
							False;

						GetLayoutObjectAttribute ( ~tabToCheck ; "isFrontTabPanel" )
						and IsEmpty ( ~parentTab ); // does not have a parent
							True;
							
						GetLayoutObjectAttribute ( ~tabToCheck; "isFrontTabPanel" )
						and PatternCount ( ¶ & theList & ¶; ¶ & ~parentTab & ¶ ); // parent is already in theList
							True;
							
						False
					); 

	theList = theList & If ( ~isCurrentTab ; ~tabToCheck & ¶ ) 

];
	If ( not IsEmpty ( ~tabToCheck ) ; WindowActiveTabs ( init ; theList ) ; theList ) 
)