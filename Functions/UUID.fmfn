/**
 * =====================================
 * UUID
 *
 * PURPOSE:
 * UUID creates a universally unique identifier
 * suitable for use as a primary key in FileMaker number fields. The UUID is an
 * encoding of the creation timestamp, RecordID (if available), and NIC (MAC)
 * address of the machine that created the record.
 *
 * RETURNS:
 * A delimited number of the form 1-nnnnnnnnnnn-nnnnnn@nnnnnnnnnnnnnnn
 * (1 digit version & "." & 11 digit timestamp in seconds & "." &
 * 6 digit record ID & "@" & 15 digit decimal NIC address)
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 * UUID encodes the creation timestamp, NIC (MAC) address (or a random number),
 * and RecordID (or a random number) as a single delimited integer. For most
 * purposes, FileMaker will ignore the hyphen "-" and at symbol "@" in number
 * fields; they are only readability aids.
 *
 * This function generates UUIDs that are meaningfully sortable. UUIDs will
 * first sort by creation timestamp, then record ID, then NIC (MAC) address.
 *
 * The creation timestamp and NIC (MAC) address can be extracted with the
 * UUIDGetTimestamp( uuid ) and UUIDGetNICAddress( uuid ) functions,
 * respectively.
 *
 * HISTORY:
 * MODIFIED on 2010-12-06 by jbante@supportgroup.com to store the
 * base 10-encoded between calls to the function, making successive calls much
 * faster.
 * MODIFIED on 2010-11-22 by Jeremy Bante of The Support Group
 * (jbante@supportgroup.com) to create UUIDs in a format more consistent with
 * the RFC 4122 standard for UUIDs and the standard format for unique addresses
 * from RFC 5322 used in several formats such as iCal and vCards.
 * MODIFIED on 2010-10-04 by jeremy@kyologic.com to prevent random NIC
 * (MAC) addresses from colliding with actual NIC addresses.
 * CREATED on 2010-09-06 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * INSPIRED by UUID functions created by Tom Robinson and Ray Cologon.
 *
 * REFERENCES:
 * Key values Best Practice: http://filemakerstandards.org/display/bp/Key+values
 * RFC 4122 UUID standard specification: http://tools.ietf.org/html/rfc4122
 * RFC 5322 Internet Message Format specification: http://www.rfc-editor.org/rfc/rfc5322.txt
 * Tom Robinson's UUID function: http://www.briandunning.com/cf/969
 * Ray Cologon's uID functions: http://www.nightwing.com.au/FileMaker/demos9/demo910.html
 * =====================================
 */
 
Case (
        /*First call to UUIDNew, check for pre-parsed NIC address*/
        not $~step;
                Let ( [
                        $~node = $$~UUID.NICADDRESS;
                        $~step = If ( $~node ; 4 ; /*else*/ 1 )
                ];
                        UUIDNew
                );
 
        /*Get NICAddress (if necessary)*/
        $~step = 1;
                Let ( [
                        $~nicAddress = Substitute ( GetValue ( Get ( SystemNICAddress ) ; 1 ) ; ":" ; "" );
                        $~nicIsRandom = not Length ( $~nicAddress );
                        $~node =
                                If ( not $~nicIsRandom;
                                        0;
                                        /*else*/ Mod ( Right ( Random ; 16 ) ; 718525023289342 ) + 281474976710657 //out-of-range random number
                                );
                        $~i = 0;
                        $~step = If ( not $~nicIsRandom ; 2 ; /*else*/ 4 )
                ];
                        UUIDNew
                );
 
        /*Parse NICAddress from hexadecimal to a FileMaker (base 10) number*/
        $~step = 2;
                Let ( [
                        $~nicDigit = Middle ( $~nicAddress ; 12 - $~i ; 1 );
                        $~nicDigit = Position ( "0123456789abcdefg" ; $~nicDigit ; 1 ; 1 ) - 1; //convert digit to number
                        $~node = $~nicDigit * ( 16 ^ $~i ) + $~node; //add digit to node
                        $~step = If ( $~i < 11 ; 2 ; /*else*/ 3 ); //advance to next digit, if necessary
                        $~i = $~i + 1
                ];
                        UUIDNew
                );
 
        /*Store NIC address for future reference*/
        $~step = 3;
                Let ( [
                        $$~UUID.NICADDRESS = $~node;
                        $~step = 4
                ];
                        UUIDNew
                );
 
        /*Concatenate information*/
        $~step = 4;
                Let ( [
                        ~version = If ( $~nicIsRandom ; 4 ; /*else*/ 1 );
                        ~timestamp = GetAsNumber ( Get ( CurrentHostTimeStamp ) );
                        ~timestamp = Right ( "00000000000" & ~timestamp ; 11 );
                        ~recordID = Get ( RecordID );
                        ~recordID =
                                Case(
                                        ~recordID ≠ 0 ; Right ( "000000" & ~recordID ; 6 );
                                        /*else*/ Right ( Random ; 6 )
                                );
                        ~nicAddress = Right ( "000000000000000" & $~node ; 15 );
 
                        //clear variables
                        $~nicAddress = "";
                        $~nicIsRandom = "";
                        $~node = "";
                        $~i = "";
                        $~step = "";
                        $~nicDigit = ""
                ];
                        ~version & "-" & ~timestamp & "-" & ~recordID
                        & If ( ~version = 4; "-"; /*else*/ "@" )
                        & ~nicAddress
                )
)