/**
 * =====================================
 * UUIDNew
 *
 * PURPOSE:
 * Creates a universally unique identifier suitable for use as a primary key in
 * FileMaker number fields. The UUID is an encoding of the creation timestamp, a
 * serial number, and the NIC (MAC) address of the device that created the UUID.
 * The values returned by this and related functions have a one-to-one
 * correspondence with UUIDs following the RFC 4122 standard — all values in the
 * format generated by this function can be converted to RFC 4122, and
 * visa-versa.
 *
 * RETURNS:
 * A 41-digit delimited number of the form:
 * v-r-mmmmmmmmmmmmTsssssss-ccccc@nnnnnnnnnnnnnnn
 * The sections of the UUID correspond to:
 * v: A UUID version (type) number
 * r: A variant code reserved by the RFC 4122 standard
 * m: The creation timestamp (seconds since 0001-01-01T00:00:00)
 * s: A serial number, reset for each second
 * c: A "clock sequence"
 * n: The NIC address ("node") of the device that created the UUID
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * VARIABLES:
 * $$~UUID_NODE
 * $$~UUID_TIMESTAMP
 * $$~UUID_SERIALNUMBER
 *
 * NOTES:
 * For most practical purposes, FileMaker will ignore the text delimiters in
 * values returned by this function.
 *
 * This function generates UUIDs that are meaningfully sortable. Values sort
 * by version, then creation order, then node (creation device).
 *
 * The value can be converted to RFC 4122 canonical form (hexadecimal) with the
 * UUIDGetAsRFC4122 function. The creation timestamp and NIC (MAC) address can
 * be extracted with the UUIDGetTimestamp and UUIDGetNICAddress functions.
 *
 * HISTORY:
 * MODIFIED on 2011-02-02 by jbante@supportgroup.com to use a format with a
 * one-to-one relationship with UUIDs in RFC 4122 format.
 * MODIFIED on 2010-12-06 by jbante@supportgroup.com to store the
 * base 10-encoded node between calls to the function, making successive calls
 * much faster.
 * MODIFIED on 2010-11-22 by Jeremy Bante of The Support Group
 * (jbante@supportgroup.com) to create UUIDNew in a format more consistent with
 * the RFC 4122 standard for UUIDs and the standard format for unique
 * addresses from RFC 5322 used in several formats such as iCal and vCards.
 * MODIFIED on 2010-10-04 by jeremy@kyologic.com to prevent random NIC
 * (MAC) addresses from colliding with actual NIC addresses.
 * CREATED on 2010-09-06 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * INSPIRED by UUID functions created by Tom Robinson and Ray Cologon.
 *
 * REFERENCES:
 * Key values Best Practice: httphttp://filemakerstandards.org/pages/viewpage.action?pageId=557386
 * RFC 4122 standard UUID specification: http://tools.ietf.org/html/rfc4122
 * RFC 5322 Internet Message Format specification: http://www.rfc-editor.org/rfc/rfc5322.txt
 * Tom Robinson's UUID function: http://www.briandunning.com/cf/969
 * Ray Cologon's uID functions: http://www.nightwing.com.au/FileMaker/demos9/demo910.html
 * UUIDGetAsRFC4122: http://www.briandunning.com/cf/1221
 * UUIDGetAsUUID: http://www.briandunning.com/cf/1273
 * UUIDGetNICAddress: http://www.briandunning.com/cf/1222
 * UUIDGetSeconds: http://www.briandunning.com/cf/1223
 * UUIDNew: http://www.briandunning.com/cf/1220
 * UUIDRandom: http://www.briandunning.com/cf/1246
 * =====================================
 */
 
Case (
	/*First call to UUIDNew, set-up*/
	not $~step;
		Let ( [
				~timestamp =
					Mod (
						GetAsNumber ( Get ( CurrentHostTimestamp ) );
						165208454460
					);
				$$~UUID_SERIALNUMBER =
					If ( ~timestamp = $$~UUID_TIMESTAMP;
						Mod ( $$~UUID_SERIALNUMBER + 1 ; 10000000 );
						/*else*/ 0
					);
				$$~UUID_TIMESTAMP = ~timestamp;
				$~step = If ( $$~UUID_NODE ; 4 ; /*else*/ 1 )
		];
			UUIDNew
		);
 
	/*Get NICAddress (if possible)*/
	$~step = 1;
		Let ( [
			$~nicAddress = Substitute ( GetValue ( Get ( SystemNICAddress ) ; 1 ); ":" ; "" );
			$~nicIsRandom = not Length ( $~nicAddress );
			$~i = 0;
			$~step = If ( not $~nicIsRandom ; $~step + 1 ; /*else*/ 4 )
		];
			UUIDNew
		);
 
	/*Parse NICAddress from hexadecimal to a FileMaker (base 10) number*/
	$~step = 2;
		Let ( [
			$~nicDigit = Middle ( $~nicAddress ; 12 - $~i ; 1 );
			$~nicDigit = Position ( "0123456789abcdefg" ; $~nicDigit ; 1 ; 1 ) - 1; //convert digit to number
			$~node = $~nicDigit * ( 16 ^ $~i ) + $~node; //add digit to node
			$~step = If ( $~i < 11 ; $~step ; /*else*/ $~step + 1  );
			$~i = $~i + 1
		];
			UUIDNew
		);
 
	/*Store NIC address for future reference*/
	$~step = 3;
		Let ( [
			$$~UUID_NODE = $~node;
			$~step = $~step + 1
		];
			UUIDNew
		);
 
	/*Concatenate information*/
	$~step = 4;
		Let ( [
			~version = If ( $~nicIsRandom ; 4 ; /*else*/ 1 );

			//purge variables
			$~nicAddress = "";
			$~nicIsRandom = "";
			$~node = "";
			$~i = "";
			$~step = "";
			$~nicDigit = ""
		];
			//v-r-mmm mmm mmm mmmTsss ssss-ccccc@nnnnn nnnnn nnnnn
			~version & "-"
			& "2-" //reserved variant code
			& If ( ~version = 1;
				Right ( "000000000000" & $$~UUID_TIMESTAMP ; 12 ) & "T"
				& Right ( "0000000" & $$~UUID_SERIALNUMBER ; 7 ) & "-"
				& Right ( "00000" & Floor ( Random * 16384 ) ; 5 ) & "@"
				& Right ( "000000000000000" & $$~UUID_NODE ; 15 );
			/*else, Random*/
				Right ( "000000000000" & Floor ( Random * 165208454460 ) ; 12 ) & "-"
				& Right ( Random ; 7 ) & "-"
				& Right ( "00000" & Floor ( Random * 16384 ) ; 5 ) & "-"
				& Right ( "000000000000000" & Floor ( Random * 281474976710656 ) ; 15 )
			)
		)
)