/*
 * =====================================================
 * WindowProperties ( method )
 * 
 * PARAMETERS:
 *		@method (enum) default, piped, let, variables
 *
 * RETURNS:
 *		(list) window properties according to specified method
 *
 * DEPENDENCIES:
 *		VariableList()
 *
 * NOTES:
 *		Provides multiple methods for returning the
 *		properties of the current window
 *		See the WindowCenter companion function
 * =====================================================
 * 
 */

Let ( [
	~keys = List ( "name"; "layout"; "id"; "top";"left";"width";"height";"viewas";"mode";"statusarea";"zoomlevel";"textruler");
	~parent = List (
		"parentWindowName";
		"parentWindowLayout";
		"parentWindowID";
		"parentWindowTop";
		"parentWindowLeft";
		"parentWindowWidth";
		"parentWindowHeight";
		"parentWindowViewAs";
		"parentWindowMode";
		"parentWindowStatusArea";
		"parentWindowZoomLevel";
		"parentWindowTextRuler"
		);
	~values = List (
				Get ( WindowName );
				Get ( LayoutName );
				GetValue ( LayoutIDs ( Get ( FileName ) ) ; Get ( LayoutNumber ) );
				Get ( WindowTop );
				Get ( WindowLeft );
				Get ( WindowWidth );
				Get ( WindowHeight );
				Get ( LayoutViewState );
				Get ( WindowMode );
				Get ( StatusAreaState );
				Get ( WindowZoomLevel );
				Get ( TextRulerVisible )
	)
];
	// returns
	Case(
		method = "" or
		method = "default";
			~values;

		method = "piped";
			Substitute ( ~values ; Â¶ ; "|" );

		// global variables are returned by VariableList() - use Substitute ( properties ; "$$" ; "$" ) to make local
		method = "let";
			VariableList ( ~keys; ~values ; "global" );
			
		method = "parentVars"
		or method = "parent";
			VariableList ( ~parent; ~values ; "local" );

		// default
		~values
	)
)